import { createClient } from '@supabase/supabase-js'
import type { NextApiRequest, NextApiResponse } from 'next'
import fs from 'fs'
import os from 'os'
import path from 'path'

// üì¶ Khai b√°o bi·∫øn m√¥i tr∆∞·ªùng
const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const bucket = process.env.SUPABASE_STORAGE_BUCKET || 'stream-files'

if (!supabaseUrl || !supabaseKey) {
    throw new Error('‚ùå Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY')
}

// üîë T·∫°o Supabase client
const supabase = createClient(supabaseUrl, supabaseKey)

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== 'GET') {
        return res.status(405).json({ error: 'Method Not Allowed' })
    }

    try {
        // üîó 2 file nguy√™n li·ªáu th·ª±c t·∫ø
        const fileId = 'input-1750045322875-axtkedis3zr'
        const videoPath = `input-videos/${fileId}.mp4`
        const audioPath = `input-audios/${fileId}.mp3`

        // üìÅ Th∆∞ m·ª•c t·∫°m tr√™n RAM
        const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'onlook-test-'))
        const videoFile = path.join(tmpDir, 'downloaded-video.mp4')
        const audioFile = path.join(tmpDir, 'downloaded-audio.mp3')

        // üé¨ T·∫£i video
        const { data: videoData, error: videoError } = await supabase
            .storage
            .from(bucket)
            .download(videoPath)

        if (videoError) throw new Error(`‚ùå T·∫£i video th·∫•t b·∫°i: ${videoError.message}`)
        fs.writeFileSync(videoFile, Buffer.from(await videoData.arrayBuffer()))

        // üéß T·∫£i audio
        const { data: audioData, error: audioError } = await supabase
            .storage
            .from(bucket)
            .download(audioPath)

        if (audioError) throw new Error(`‚ùå T·∫£i audio th·∫•t b·∫°i: ${audioError.message}`)
        fs.writeFileSync(audioFile, Buffer.from(await audioData.arrayBuffer()))

        // ‚úÖ K·∫øt qu·∫£ test th√†nh c√¥ng
        return res.status(200).json({
            success: true,
            message: 'T·∫£i v·ªÅ th√†nh c√¥ng c·∫£ 2 file',
            tempPaths: {
                video: videoFile,
                audio: audioFile
            }
        })
    } catch (err: any) {
        console.error('‚ùå L·ªói t·∫£i file:', err)
        return res.status(500).json({ success: false, error: err.message })
    }
}
