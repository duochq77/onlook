import type { NextApiRequest, NextApiResponse } from 'next'
import { Redis } from '@upstash/redis'
import { execSync } from 'child_process'

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

// H√†m g·ªçi Cloud Run Job ƒë·ªÉ worker ch·∫°y batch (b·∫°n s·ª≠a theo t√™n v√† region job c·ªßa b·∫°n)
async function triggerCloudRunJob() {
    try {
        // G·ªçi command gcloud deploy job (ph·∫£i c√†i s·∫µn gcloud CLI tr√™n m√¥i tr∆∞·ªùng backend)
        // N·∫øu backend kh√¥ng c√≥ shell access, c·∫ßn chuy·ªÉn sang API call Google Cloud Run
        execSync(`gcloud beta run jobs execute process-video-worker --region asia-southeast1 --project onlook-main`)
        console.log('‚úÖ ƒê√£ g·ªçi Cloud Run Job process-video-worker')
    } catch (err) {
        console.error('‚ùå L·ªói g·ªçi Cloud Run Job:', err)
    }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' })
    }

    const { videoUrl, audioUrl, outputName } = req.body

    if (!videoUrl || !audioUrl || !outputName) {
        return res.status(400).json({ error: 'Thi·∫øu tham s·ªë videoUrl, audioUrl ho·∫∑c outputName' })
    }

    const jobId = `job-${Date.now()}-${Math.random().toString(36).slice(2)}`

    const jobPayload = {
        jobId,
        videoUrl,
        audioUrl,
        outputName,
        createdAt: Date.now(),
    }

    try {
        await redis.lpush('onlook:process-video-queue', JSON.stringify(jobPayload))
        console.log(`üü¢ ƒê√£ ƒë·∫©y job v√†o queue: ${jobId}`)

        // G·ªçi Cloud Run Job worker ch·∫°y x·ª≠ l√Ω batch (kh√¥ng ch·ªù k·∫øt qu·∫£, kh√¥ng block API)
        triggerCloudRunJob()

        return res.status(200).json({ message: 'Job ƒë√£ ƒë∆∞·ª£c t·∫°o v√† Cloud Run Job ƒëang ch·∫°y', jobId })
    } catch (error) {
        console.error('‚ùå L·ªói ƒë·∫©y job v√†o queue ho·∫∑c g·ªçi Cloud Run Job:', error)
        return res.status(500).json({ error: 'Kh√¥ng th·ªÉ t·∫°o job ho·∫∑c g·ªçi worker' })
    }
}
