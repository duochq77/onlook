import type { NextApiRequest, NextApiResponse } from 'next'
import { getGoogleAccessToken } from '@/utils/getGoogleToken'
import { Redis } from '@upstash/redis'

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

const CLOUD_RUN_URL = process.env.CLOUD_RUN_URL!

async function triggerCloudRunJob(token: string, jobId: string) {
    // G·ªçi Google Cloud Run job v·ªõi bi·∫øn m√¥i tr∆∞·ªùng JOB_ID = jobId
    const res = await fetch(CLOUD_RUN_URL, {
        method: 'POST',
        headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
        },
        // Google Cloud Run Jobs API kh√¥ng cho override bi·∫øn env tr·ª±c ti·∫øp khi g·ªçi jobs.run,
        // n√™n ta ƒë·ªÉ body r·ªóng, d·ªØ li·ªáu job l∆∞u tr√™n Redis v√† Worker l·∫•y d·ª±a tr√™n JOB_ID env
        body: JSON.stringify({}),
    })

    if (!res.ok) {
        const text = await res.text()
        console.error(`‚ùå L·ªói g·ªçi Cloud Run Job: ${res.status} ${text}`)
        throw new Error(`L·ªói g·ªçi Cloud Run Job: ${res.status} ${text}`)
    }
    return await res.json()
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' })
    }

    const { videoUrl, audioUrl, outputName, jobId } = req.body

    if (!videoUrl || !audioUrl || !outputName || !jobId) {
        return res.status(400).json({ error: 'Thi·∫øu tham s·ªë b·∫Øt bu·ªôc (videoUrl, audioUrl, outputName, jobId)' })
    }

    const jobPayload = { jobId, videoUrl, audioUrl, outputName, createdAt: Date.now() }

    try {
        // L∆∞u jobPayload d∆∞·ªõi Redis Hash v·ªõi key l√† jobId
        await redis.hset('onlook:jobs', jobId, JSON.stringify(jobPayload))
        console.log(`üü¢ ƒê√£ l∆∞u job ${jobId} v√†o Redis`)

        const token = await getGoogleAccessToken()
        console.log('üîë Google Access Token:', token.slice(0, 10) + '...')

        // G·ªçi Cloud Run Job (body r·ªóng v√¨ kh√¥ng truy·ªÅn jobPayload qua)
        await triggerCloudRunJob(token, jobId)

        return res.status(200).json({ message: 'Job ƒë√£ ƒë∆∞·ª£c t·∫°o v√† Cloud Run Job ƒëang ch·∫°y', jobId })
    } catch (error: any) {
        console.error('‚ùå L·ªói t·∫°o job ho·∫∑c g·ªçi Worker:', error)
        return res.status(500).json({ error: 'Kh√¥ng th·ªÉ t·∫°o job ho·∫∑c g·ªçi worker', details: error.message || error.toString() })
    }
}
