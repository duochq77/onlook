"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const supabase_js_1 = require("@supabase/supabase-js");
const redis_1 = require("@upstash/redis");
const stream_1 = require("stream");
console.log('--- DEBUG ENV VARIABLES ---');
console.log('NEXT_PUBLIC_SUPABASE_URL =', process.env.NEXT_PUBLIC_SUPABASE_URL);
console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY =', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'OK' : 'MISSING');
console.log('SUPABASE_STORAGE_BUCKET =', process.env.SUPABASE_STORAGE_BUCKET);
console.log('UPSTASH_REDIS_REST_URL =', process.env.UPSTASH_REDIS_REST_URL);
console.log('UPSTASH_REDIS_REST_TOKEN =', process.env.UPSTASH_REDIS_REST_TOKEN ? 'OK' : 'MISSING');
const redis = new redis_1.Redis({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
});
const supabase = (0, supabase_js_1.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
const TMP = '/tmp';
if (!fs_1.default.existsSync(TMP)) {
    console.error('‚ùå Th∆∞ m·ª•c /tmp kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ ghi!');
    process.exit(1);
}
async function download(url, dest) {
    console.log('Downloading:', url);
    const res = await fetch(url);
    if (!res.ok || !res.body)
        throw new Error(`‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c: ${url}`);
    const fileStream = fs_1.default.createWriteStream(dest);
    const nodeStream = stream_1.Readable.from(res.body);
    await new Promise((resolve, reject) => {
        nodeStream.pipe(fileStream);
        nodeStream.on('error', reject);
        fileStream.on('finish', resolve);
    });
}
const checkFileSize = (filePath) => {
    try {
        const stats = fs_1.default.statSync(filePath);
        return stats.size > 0;
    }
    catch {
        return false;
    }
};
const extractPath = (url) => {
    try {
        const parts = url.split(`/storage/v1/object/public/${process.env.SUPABASE_STORAGE_BUCKET}/`);
        if (parts.length === 2) {
            console.log('extractPath:', parts[1]);
            return parts[1];
        }
        else {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ƒë∆∞·ªùng d·∫´n ƒë√∫ng t·ª´ URL:', url);
            return '';
        }
    }
    catch (e) {
        console.error('‚ùå L·ªói tr√≠ch xu·∫•t ƒë∆∞·ªùng d·∫´n x√≥a file:', e);
        return '';
    }
};
async function processJob(job) {
    console.log('üìå Debug: job nh·∫≠n t·ª´ Redis =', job);
    if (!job.outputName || typeof job.outputName !== 'string') {
        console.error('‚ùå outputName kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu:', job.outputName, `Ki·ªÉu d·ªØ li·ªáu:`, typeof job.outputName);
        return;
    }
    if (!job.videoUrl ||
        !job.audioUrl ||
        !process.env.SUPABASE_STORAGE_BUCKET) {
        console.error('‚ùå Thi·∫øu gi√° tr·ªã job ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng! D·ª´ng Worker.');
        process.exit(1);
    }
    if (typeof TMP !== 'string' || TMP.length === 0) {
        console.error('‚ùå Bi·∫øn TMP kh√¥ng h·ª£p l·ªá:', TMP);
        process.exit(1);
    }
    const inputVideo = path_1.default.join(TMP, 'input.mp4');
    const inputAudio = path_1.default.join(TMP, 'input.mp3');
    const cleanVideo = path_1.default.join(TMP, 'clean.mp4');
    const outputFile = path_1.default.join(TMP, job.outputName);
    try {
        console.log('üì• ƒêang t·∫£i video + audio t·ª´ Supabase...');
        await download(job.videoUrl, inputVideo);
        await download(job.audioUrl, inputAudio);
        console.log('üìå Ki·ªÉm tra file t·ªìn t·∫°i tr√™n Worker:');
        console.log('üìå inputVideo:', fs_1.default.existsSync(inputVideo));
        console.log('üìå inputAudio:', fs_1.default.existsSync(inputAudio));
        console.log('üìå Ki·ªÉm tra dung l∆∞·ª£ng file:');
        console.log('üìå inputVideo k√≠ch th∆∞·ªõc:', checkFileSize(inputVideo) ? 'OK' : 'Kh√¥ng h·ª£p l·ªá');
        console.log('üìå inputAudio k√≠ch th∆∞·ªõc:', checkFileSize(inputAudio) ? 'OK' : 'Kh√¥ng h·ª£p l·ªá');
        if (!fs_1.default.existsSync(inputVideo) || !fs_1.default.existsSync(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ kh√¥ng t·ªìn t·∫°i!');
        }
        if (!checkFileSize(inputVideo) || !checkFileSize(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ c√≥ dung l∆∞·ª£ng 0, kh√¥ng h·ª£p l·ªá!');
        }
        console.log('‚úÇÔ∏è ƒêang t√°ch audio kh·ªèi video...');
        (0, child_process_1.execSync)(`ffmpeg -i ${inputVideo} -an -c:v copy ${cleanVideo} -y`);
        console.log('üéß ƒêang gh√©p audio g·ªëc v√†o video s·∫°ch...');
        (0, child_process_1.execSync)(`ffmpeg -i ${cleanVideo} -i ${inputAudio} -c:v copy -c:a aac -shortest ${outputFile} -y`);
        console.log('üìå Upload l√™n Supabase...');
        const { data, error } = await supabase.storage
            .from(process.env.SUPABASE_STORAGE_BUCKET)
            .upload(`outputs/${job.outputName}`, fs_1.default.createReadStream(outputFile), {
            contentType: 'video/mp4',
            upsert: true,
        });
        if (error) {
            console.error('‚ùå L·ªói upload file merged:', error.message);
            throw error;
        }
        else {
            console.log('‚úÖ File uploaded th√†nh c√¥ng:', data);
        }
        // Xo√° file t·∫°m sau khi ho√†n th√†nh job
        const cleanUpFiles = [inputVideo, inputAudio, cleanVideo, outputFile];
        for (const f of cleanUpFiles) {
            try {
                if (fs_1.default.existsSync(f)) {
                    fs_1.default.unlinkSync(f);
                    console.log(`‚úÖ ƒê√£ x√≥a file t·∫°m: ${f}`);
                }
            }
            catch (err) {
                console.warn(`‚ö†Ô∏è L·ªói khi x√≥a file t·∫°m ${f}:`, err);
            }
        }
        // X√≥a file nguy√™n li·ªáu tr√™n Supabase Storage
        const videoPath = extractPath(job.videoUrl);
        const audioPath = extractPath(job.audioUrl);
        if (videoPath) {
            await supabase.storage.from(process.env.SUPABASE_STORAGE_BUCKET).remove([videoPath]);
            console.log(`‚úÖ ƒê√£ x√≥a file video nguy√™n li·ªáu: ${videoPath}`);
        }
        if (audioPath) {
            await supabase.storage.from(process.env.SUPABASE_STORAGE_BUCKET).remove([audioPath]);
            console.log(`‚úÖ ƒê√£ x√≥a file audio nguy√™n li·ªáu: ${audioPath}`);
        }
        console.log(`‚úÖ Ho√†n t·∫•t job ${job.jobId}: outputs/${job.outputName}`);
    }
    catch (err) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω job ${job.jobId}:`, err);
        // D√π l·ªói v·∫´n xo√° file t·∫°m
        const cleanUpFiles = [inputVideo, inputAudio, cleanVideo, outputFile];
        for (const f of cleanUpFiles) {
            try {
                if (fs_1.default.existsSync(f)) {
                    fs_1.default.unlinkSync(f);
                    console.log(`‚úÖ ƒê√£ x√≥a file t·∫°m: ${f}`);
                }
            }
            catch (err) {
                console.warn(`‚ö†Ô∏è L·ªói khi x√≥a file t·∫°m ${f}:`, err);
            }
        }
    }
}
async function runWorker() {
    console.log('‚è≥ Worker Onlook ƒëang ch·∫°y...');
    try {
        const jobJson = await redis.rpop('onlook:process-video-queue');
        if (!jobJson) {
            console.log('üü° Kh√¥ng c√≥ job n√†o ƒë·ªÉ x·ª≠ l√Ω, worker k·∫øt th√∫c.');
            process.exit(0);
        }
        let job;
        try {
            job = JSON.parse(jobJson);
        }
        catch (parseErr) {
            console.error('‚ùå Job nh·∫≠n t·ª´ Redis kh√¥ng h·ª£p l·ªá:', jobJson);
            process.exit(1);
        }
        if (!job || typeof job !== 'object') {
            console.error('‚ùå Job nh·∫≠n t·ª´ Redis b·ªã l·ªói ho·∫∑c kh√¥ng h·ª£p l·ªá:', job);
            process.exit(1);
        }
        // Ki·ªÉm tra tr∆∞·ªùng b·∫Øt bu·ªôc tr∆∞·ªõc khi x·ª≠ l√Ω
        if (!job.jobId || !job.videoUrl || !job.audioUrl || !job.outputName) {
            console.error('‚ùå Job thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc:', job);
            process.exit(1);
        }
        await processJob(job);
        console.log('‚úÖ Worker ho√†n th√†nh job, tho√°t...');
        process.exit(0);
    }
    catch (err) {
        console.error('‚ùå L·ªói worker:', err);
        process.exit(1);
    }
}
runWorker();
