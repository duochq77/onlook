"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supabase_js_1 = require("@supabase/supabase-js");
const ioredis_1 = __importDefault(require("ioredis"));
const express_1 = __importDefault(require("express"));
const { SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, SUPABASE_STORAGE_BUCKET, REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, PORT = '8080', } = process.env;
if (!SUPABASE_URL ||
    !SUPABASE_SERVICE_ROLE_KEY ||
    !SUPABASE_STORAGE_BUCKET ||
    !REDIS_HOST ||
    !REDIS_PORT ||
    !REDIS_PASSWORD) {
    throw new Error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc.');
}
const supabase = (0, supabase_js_1.createClient)(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
const redis = new ioredis_1.default({
    host: REDIS_HOST,
    port: parseInt(REDIS_PORT),
    password: REDIS_PASSWORD,
    tls: {}, // B·∫Øt bu·ªôc ƒë·ªÉ tr√°nh l·ªói ECONNRESET khi ch·∫°y tr√™n GKE
    retryStrategy: (times) => Math.min(times * 200, 2000),
});
const delay = (ms) => new Promise((res) => setTimeout(res, ms));
const processJob = async (jobRaw) => {
    try {
        const parsed = JSON.parse(jobRaw);
        const { filePath, expiresAt } = parsed;
        if (!filePath || !expiresAt) {
            console.warn('‚ö†Ô∏è Job kh√¥ng h·ª£p l·ªá, thi·∫øu filePath ho·∫∑c expiresAt.');
            return;
        }
        if (Date.now() < expiresAt) {
            // Ch∆∞a ƒë·∫øn h·∫°n xo√° ‚Äì ƒë·∫©y l·∫°i cu·ªëi h√†ng ƒë·ª£i
            await redis.rpush('delete-merged-jobs', jobRaw);
            return;
        }
        console.log(`üßΩ Xo√° file h·∫øt h·∫°n: ${filePath}`);
        const { error } = await supabase.storage.from(SUPABASE_STORAGE_BUCKET).remove([filePath]);
        if (error) {
            console.error(`‚ùå L·ªói xo√° file ${filePath}:`, error.message);
        }
        else {
            console.log(`‚úÖ ƒê√£ xo√° file ho√†n ch·ªânh kh·ªèi Supabase: ${filePath}`);
        }
    }
    catch (err) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω job:', err);
    }
};
const startWorker = async () => {
    console.log('üßº delete-merged-worker.ts kh·ªüi ƒë·ªông...');
    while (true) {
        try {
            const jobRaw = await redis.lpop('delete-merged-jobs');
            if (jobRaw) {
                await processJob(jobRaw);
            }
            else {
                await delay(5000);
            }
        }
        catch (err) {
            console.error('‚ùå L·ªói trong v√≤ng l·∫∑p worker:', err);
            await delay(5000);
        }
    }
};
startWorker().catch(console.error);
// Express server ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
const app = (0, express_1.default)();
app.get('/', (_req, res) => res.send('üü¢ delete-merged-worker ƒëang ch·∫°y'));
app.listen(Number(PORT), () => {
    console.log(`üåê delete-merged-worker l·∫Øng nghe t·∫°i PORT ${PORT}`);
});
