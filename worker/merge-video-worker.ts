import 'dotenv/config'
import { Redis } from '@upstash/redis'
import { createClient } from '@supabase/supabase-js'
import fs from 'fs'
import path from 'path'
import { exec } from 'child_process'
import { promisify } from 'util'

const execPromise = promisify(exec)

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

async function runMergeWorker() {
    console.log('üé¨ Merge Video Worker b·∫Øt ƒë·∫ßu...')

    while (true) {
        const job = await redis.lpop<string>('ffmpeg-jobs:merge')
        if (!job) {
            await new Promise((r) => setTimeout(r, 2000))
            continue
        }

        const { cleanVideo, audio, outputName } = JSON.parse(job)
        console.log('üì¶ Nh·∫≠n job MERGE:', { cleanVideo, audio, outputName })

        const tmpCleanVideo = path.join('/tmp', 'clean-video.mp4')
        const tmpAudio = path.join('/tmp', 'audio.mp3')
        const tmpOutput = path.join('/tmp', outputName)

        // 1. T·∫£i cleanVideo t·ª´ Supabase v·ªÅ RAM
        const { data: cleanVideoData, error: err1 } = await supabase.storage
            .from('stream-files')
            .download(cleanVideo)
        if (err1 || !cleanVideoData) {
            console.error('‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c cleanVideo:', err1)
            continue
        }
        fs.writeFileSync(tmpCleanVideo, Buffer.from(await cleanVideoData.arrayBuffer()))

        // 2. T·∫£i audio t·ª´ Supabase v·ªÅ RAM
        const { data: audioData, error: err2 } = await supabase.storage
            .from('stream-files')
            .download(audio)
        if (err2 || !audioData) {
            console.error('‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c audio:', err2)
            continue
        }
        fs.writeFileSync(tmpAudio, Buffer.from(await audioData.arrayBuffer()))

        // 3. D√πng FFmpeg ƒë·ªÉ gh√©p video v√† audio ‚Üí ra tmpOutput
        try {
            console.log('üîß Gh√©p video + audio...')
            await execPromise(`ffmpeg -y -i ${tmpCleanVideo} -i ${tmpAudio} -c:v copy -c:a aac ${tmpOutput}`)
            console.log('‚úÖ Gh√©p xong:', tmpOutput)
        } catch (err) {
            console.error('‚ùå L·ªói khi ch·∫°y FFmpeg merge:', err)
            continue
        }

        // 4. Upload file ho√†n ch·ªânh l√™n Supabase
        try {
            const { error: uploadError } = await supabase.storage
                .from('stream-files')
                .upload(`outputs/${outputName}`, fs.createReadStream(tmpOutput), {
                    contentType: 'video/mp4',
                    duplex: 'half',
                })

            if (uploadError) {
                console.error('‚ùå L·ªói upload l√™n Supabase:', uploadError)
                continue
            }

            console.log('üì§ Upload l√™n Supabase th√†nh c√¥ng:', `outputs/${outputName}`)
        } catch (err) {
            console.error('‚ùå L·ªói khi upload merged video:', err)
            continue
        }

        // 5. G·ªçi job cleanup-worker.ts ƒë·ªÉ d·ªçn d·∫πp file g·ªëc
        try {
            const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/trigger-cleanup`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cleanVideo, audio }),
            })

            if (!res.ok) {
                const text = await res.text()
                console.warn('‚ö†Ô∏è Trigger cleanup th·∫•t b·∫°i:', text)
            } else {
                console.log('üßπ ƒê√£ g·ªçi job cleanup-worker.ts')
            }
        } catch (err) {
            console.warn('‚ö†Ô∏è Kh√¥ng g·ªçi ƒë∆∞·ª£c API cleanup:', err)
        }
    }
}

runMergeWorker().catch((err) => console.error('‚ùå Worker crash:', err))
