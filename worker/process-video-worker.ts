import 'dotenv/config'
import fs from 'fs'
import { execSync } from 'child_process'
import path from 'path'
import { createClient } from '@supabase/supabase-js'
import { Readable } from 'stream'

// ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng truy·ªÅn l√™n ch·ª©a jobPayload JSON string
const rawJobPayload = process.env.JOB_PAYLOAD
if (!rawJobPayload) {
    console.error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng JOB_PAYLOAD ch·ª©a d·ªØ li·ªáu job')
    process.exit(1)
}

let job: {
    jobId: string
    videoUrl: string
    audioUrl: string
    outputName: string
}

try {
    job = JSON.parse(rawJobPayload)
} catch {
    console.error('‚ùå JOB_PAYLOAD kh√¥ng h·ª£p l·ªá JSON:', rawJobPayload)
    process.exit(1)
}

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

const TMP = '/tmp'

async function download(url: string, dest: string) {
    console.log('Downloading:', url)
    const res = await fetch(url)
    if (!res.ok || !res.body) throw new Error(`‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c: ${url}`)

    const fileStream = fs.createWriteStream(dest)
    const nodeStream = Readable.from(res.body as any)

    await new Promise<void>((resolve, reject) => {
        nodeStream.pipe(fileStream)
        nodeStream.on('error', reject)
        fileStream.on('finish', resolve)
    })
}

const checkFileSize = (filePath: string) => {
    try {
        const stats = fs.statSync(filePath)
        return stats.size > 0
    } catch {
        return false
    }
}

async function processJob() {
    const inputVideo = path.join(TMP, 'input.mp4')
    const inputAudio = path.join(TMP, 'input.mp3')
    const cleanVideo = path.join(TMP, 'clean.mp4')
    const outputFile = path.join(TMP, job.outputName)

    try {
        console.log('üì• ƒêang t·∫£i video + audio t·ª´ Supabase...')
        await download(job.videoUrl, inputVideo)
        await download(job.audioUrl, inputAudio)

        console.log('üìå Ki·ªÉm tra file t·ªìn t·∫°i tr√™n Worker:')
        console.log('üìå inputVideo:', fs.existsSync(inputVideo))
        console.log('üìå inputAudio:', fs.existsSync(inputAudio))

        console.log('üìå Ki·ªÉm tra dung l∆∞·ª£ng file:')
        console.log('üìå inputVideo k√≠ch th∆∞·ªõc:', checkFileSize(inputVideo) ? 'OK' : 'Kh√¥ng h·ª£p l·ªá')
        console.log('üìå inputAudio k√≠ch th∆∞·ªõc:', checkFileSize(inputAudio) ? 'OK' : 'Kh√¥ng h·ª£p l·ªá')

        if (!fs.existsSync(inputVideo) || !fs.existsSync(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ kh√¥ng t·ªìn t·∫°i!')
        }
        if (!checkFileSize(inputVideo) || !checkFileSize(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ c√≥ dung l∆∞·ª£ng 0, kh√¥ng h·ª£p l·ªá!')
        }

        console.log('‚úÇÔ∏è ƒêang t√°ch audio kh·ªèi video...')
        execSync(`ffmpeg -i ${inputVideo} -an -c:v copy ${cleanVideo} -y`)

        console.log('üéß ƒêang gh√©p audio g·ªëc v√†o video s·∫°ch...')
        execSync(`ffmpeg -i ${cleanVideo} -i ${inputAudio} -c:v copy -c:a aac -shortest ${outputFile} -y`)

        console.log('üìå Upload l√™n Supabase...')
        const { data, error } = await supabase.storage
            .from(process.env.SUPABASE_STORAGE_BUCKET!)
            .upload(`outputs/${job.outputName}`, fs.createReadStream(outputFile), {
                contentType: 'video/mp4',
                upsert: true,
            })

        if (error) {
            console.error('‚ùå L·ªói upload file merged:', error.message)
            throw error
        } else {
            console.log('‚úÖ File uploaded th√†nh c√¥ng:', data)
        }

        // D·ªçn file t·∫°m
        ;[inputVideo, inputAudio, cleanVideo, outputFile].forEach(f => {
            if (fs.existsSync(f)) {
                try {
                    fs.unlinkSync(f)
                    console.log(`‚úÖ ƒê√£ x√≥a file t·∫°m: ${f}`)
                } catch (e) {
                    console.warn(`‚ö†Ô∏è L·ªói khi x√≥a file t·∫°m ${f}:`, e)
                }
            }
        })

        console.log(`‚úÖ Ho√†n t·∫•t job ${job.jobId}: outputs/${job.outputName}`)
    } catch (err) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω job ${job.jobId}:`, err)
        process.exit(1)
    }
}

processJob()
