import 'dotenv/config'
import fs from 'fs'
import { execSync } from 'child_process'
import path from 'path'
import { createClient } from '@supabase/supabase-js'
import { Redis } from '@upstash/redis'
import { Readable } from 'stream'

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

const TMP = '/tmp'

if (!fs.existsSync(TMP)) {
    console.error('‚ùå Th∆∞ m·ª•c /tmp kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ ghi!')
    process.exit(1)
}

async function download(url: string, dest: string) {
    const res = await fetch(url)
    if (!res.ok || !res.body) throw new Error(`‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c: ${url}`)

    const fileStream = fs.createWriteStream(dest)
    const nodeStream = Readable.from(res.body as any)

    await new Promise<void>((resolve, reject) => {
        nodeStream.pipe(fileStream)
        nodeStream.on('error', reject)
        fileStream.on('finish', resolve)
    })
}

const checkFileSize = (filePath: string) => {
    try {
        const stats = fs.statSync(filePath)
        return stats.size > 0
    } catch {
        return false
    }
}

async function processJob(job: {
    jobId: string
    videoUrl: string
    audioUrl: string
    outputName: string
}) {
    console.log("üìå Debug: job.outputName =", job.outputName, "typeof =", typeof job.outputName)
    console.log("üìå Debug: job.videoUrl =", job.videoUrl, "typeof =", typeof job.videoUrl)
    console.log("üìå Debug: job.audioUrl =", job.audioUrl, "typeof =", typeof job.audioUrl)
    console.log("üìå Debug: SUPABASE_STORAGE_BUCKET =", process.env.SUPABASE_STORAGE_BUCKET)

    if (
        typeof job.outputName !== 'string' || job.outputName.length === 0 ||
        typeof job.videoUrl !== 'string' || job.videoUrl.length === 0 ||
        typeof job.audioUrl !== 'string' || job.audioUrl.length === 0 ||
        !process.env.SUPABASE_STORAGE_BUCKET
    ) {
        console.error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c tham s·ªë job kh√¥ng h·ª£p l·ªá!')
        process.exit(1)
    }

    const inputVideo = path.join(TMP, 'input.mp4')
    const inputAudio = path.join(TMP, 'input.mp3')
    const cleanVideo = path.join(TMP, 'clean.mp4')
    const outputFile = path.join(TMP, job.outputName)

    console.log(`üü¢ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω job ${job.jobId}`)

    try {
        console.log('üì• ƒêang t·∫£i video + audio t·ª´ Supabase...')
        await download(job.videoUrl, inputVideo)
        await download(job.audioUrl, inputAudio)

        console.log("üìå Ki·ªÉm tra file t·∫£i v·ªÅ:")
        console.log("üìå inputVideo t·ªìn t·∫°i:", fs.existsSync(inputVideo))
        console.log("üìå inputAudio t·ªìn t·∫°i:", fs.existsSync(inputAudio))

        console.log("üìå Ki·ªÉm tra dung l∆∞·ª£ng file:")
        console.log("üìå inputVideo k√≠ch th∆∞·ªõc:", checkFileSize(inputVideo) ? "OK" : "Kh√¥ng h·ª£p l·ªá")
        console.log("üìå inputAudio k√≠ch th∆∞·ªõc:", checkFileSize(inputAudio) ? "OK" : "Kh√¥ng h·ª£p l·ªá")

        if (!fs.existsSync(inputVideo) || !fs.existsSync(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ kh√¥ng t·ªìn t·∫°i!')
        }
        if (!checkFileSize(inputVideo) || !checkFileSize(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ c√≥ dung l∆∞·ª£ng 0, kh√¥ng h·ª£p l·ªá!')
        }

        try {
            console.log('‚úÇÔ∏è ƒêang t√°ch audio kh·ªèi video...')
            execSync(`ffmpeg -i ${inputVideo} -an -c:v copy ${cleanVideo} -y`)
        } catch (ffmpegErr) {
            console.error('‚ùå L·ªói FFmpeg t√°ch audio:', ffmpegErr)
            throw ffmpegErr
        }

        try {
            console.log('üéß ƒêang gh√©p audio g·ªëc v√†o video s·∫°ch...')
            execSync(`ffmpeg -i ${cleanVideo} -i ${inputAudio} -c:v copy -c:a aac -shortest ${outputFile} -y`)
        } catch (ffmpegErr) {
            console.error('‚ùå L·ªói FFmpeg gh√©p audio:', ffmpegErr)
            throw ffmpegErr
        }

        console.log('üìå Upload l√™n Supabase...')
        const { data, error } = await supabase.storage
            .from(process.env.SUPABASE_STORAGE_BUCKET!)
            .upload(`outputs/${job.outputName}`, fs.createReadStream(outputFile), {
                contentType: 'video/mp4',
                upsert: true,
            })

        if (error) {
            console.error(`‚ùå L·ªói upload file merged:`, error.message)
            throw error
        } else {
            console.log(`‚úÖ File uploaded th√†nh c√¥ng:`, data)
        }

        // X√≥a file nguy√™n li·ªáu c≈©
        const extractPath = (url: string) => url.split(`/object/public/${process.env.SUPABASE_STORAGE_BUCKET}/`)[1]
        await supabase.storage.from(process.env.SUPABASE_STORAGE_BUCKET!).remove([extractPath(job.videoUrl)])
        await supabase.storage.from(process.env.SUPABASE_STORAGE_BUCKET!).remove([extractPath(job.audioUrl)])

        console.log(`‚úÖ Ho√†n t·∫•t job ${job.jobId}: outputs/${job.outputName}`)
    } catch (err) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω job ${job.jobId}:`, err)
    }
}

async function runWorker() {
    console.log('‚è≥ Worker Onlook ƒëang ch·∫°y...')

    while (true) {
        try {
            const jobJson = await redis.rpop('onlook:process-video-queue')
            if (!jobJson) {
                await new Promise((r) => setTimeout(r, 3000))
                continue
            }

            let job
            try {
                job = JSON.parse(jobJson)
            } catch (parseErr) {
                console.error('‚ùå Job nh·∫≠n t·ª´ Redis kh√¥ng h·ª£p l·ªá:', jobJson)
                continue
            }

            if (!job || typeof job !== 'object') {
                console.error('‚ùå Job nh·∫≠n t·ª´ Redis b·ªã l·ªói ho·∫∑c kh√¥ng h·ª£p l·ªá:', job)
                continue
            }

            await processJob(job)
        } catch (err) {
            console.error('‚ùå L·ªói worker:', err)
            await new Promise((r) => setTimeout(r, 5000))
        }
    }
}

runWorker()
