import http from 'http'
import 'dotenv/config'
import fs from 'fs'
import path from 'path'
import { execSync } from 'child_process'
import { createClient, SupabaseClient } from '@supabase/supabase-js'
import { Redis } from '@upstash/redis'
import { Readable } from 'stream'

// ƒê·ªãnh nghƒ©a interface job
interface Job {
    jobId: string
    videoUrl: string
    audioUrl: string
    outputName: string
}

// Kh·ªüi t·∫°o Redis client
const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

// L·∫•y bi·∫øn m√¥i tr∆∞·ªùng Supabase
const supabaseUrl = process.env.SUPABASE_URL
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY
const supabaseServiceRole = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabaseStorageBucket = process.env.SUPABASE_STORAGE_BUCKET

// Debug th√¥ng tin bi·∫øn m√¥i tr∆∞·ªùng
console.log('DEBUG: Supabase URL:', supabaseUrl)
console.log('DEBUG: Supabase Anon Key:', supabaseAnonKey ? 'Exists' : 'Missing')
console.log('DEBUG: Supabase Service Role Key:', supabaseServiceRole ? 'Exists' : 'Missing')
console.log('DEBUG: Supabase Storage Bucket:', supabaseStorageBucket ? supabaseStorageBucket : 'Missing')

// Ki·ªÉm tra ƒë·ªß bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt
if (!supabaseUrl || !supabaseAnonKey || !supabaseStorageBucket) {
    throw new Error('Missing required Supabase environment variables!')
}
if (!process.env.UPSTASH_REDIS_REST_URL || !process.env.UPSTASH_REDIS_REST_TOKEN) {
    throw new Error('Missing required Upstash Redis environment variables!')
}

// T·∫°o Supabase client (ƒëang d√πng anon key)
const supabase: SupabaseClient = createClient(supabaseUrl, supabaseAnonKey)

// N·∫øu c√≥ service role key th√¨ t·∫°o th√™m client quy·ªÅn cao h∆°n
const supabaseAdmin: SupabaseClient | null = supabaseServiceRole
    ? createClient(supabaseUrl, supabaseServiceRole)
    : null

const TMP = '/tmp'
const QUEUE_KEY = 'onlook:job-queue'

// H√†m t·∫£i file t·ª´ url v·ªÅ local
async function download(url: string, dest: string) {
    const res = await fetch(url)
    if (!res.ok || !res.body) throw new Error(`‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c file: ${url}`)

    const fileStream = fs.createWriteStream(dest)
    const nodeStream = Readable.from(res.body as any)

    await new Promise<void>((resolve, reject) => {
        nodeStream.pipe(fileStream)
        nodeStream.on('error', reject)
        fileStream.on('finish', resolve)
    })
}

// Ki·ªÉm tra file t·ªìn t·∫°i v√† c√≥ dung l∆∞·ª£ng > 0
const checkFileSize = (filePath: string): boolean => {
    try {
        const stats = fs.statSync(filePath)
        return stats.size > 0
    } catch {
        return false
    }
}

// H√†m tr√≠ch xu·∫•t path file g·ªëc trong Supabase t·ª´ url l∆∞u tr·ªØ
const extractPath = (url: string): string => {
    try {
        const parts = url.split(`/storage/v1/object/public/${supabaseStorageBucket}/`)
        if (parts.length === 2) return parts[1]
        return ''
    } catch {
        return ''
    }
}

// X·ª≠ l√Ω 1 job media
async function processJob(job: Job) {
    console.log('üìå X·ª≠ l√Ω job:', job.jobId)

    const basePath = path.join(TMP, job.jobId)
    if (!fs.existsSync(basePath)) fs.mkdirSync(basePath, { recursive: true })

    const inputVideo = path.join(basePath, 'input.mp4')
    const inputAudio = path.join(basePath, 'input.mp3')
    const cleanVideo = path.join(basePath, 'clean.mp4')
    const outputFile = path.join(basePath, job.outputName)

    try {
        // T·∫£i video v√† audio v·ªÅ
        console.log('üì• T·∫£i video + audio t·ª´ Supabase...')
        await download(job.videoUrl, inputVideo)
        await download(job.audioUrl, inputAudio)

        // Ki·ªÉm tra file t·∫£i v·ªÅ
        if (!fs.existsSync(inputVideo) || !fs.existsSync(inputAudio)) throw new Error('File t·∫£i v·ªÅ kh√¥ng t·ªìn t·∫°i')
        if (!checkFileSize(inputVideo) || !checkFileSize(inputAudio)) throw new Error('File t·∫£i v·ªÅ dung l∆∞·ª£ng 0')

        // T√°ch audio kh·ªèi video g·ªëc
        console.log('‚úÇÔ∏è T√°ch audio kh·ªèi video...')
        execSync(`ffmpeg -i ${inputVideo} -an -c:v copy ${cleanVideo} -y`)

        // Gh√©p audio m·ªõi v√†o video s·∫°ch
        console.log('üéß Gh√©p audio g·ªëc v√†o video s·∫°ch...')
        execSync(`ffmpeg -i ${cleanVideo} -i ${inputAudio} -c:v copy -c:a aac -shortest ${outputFile} -y`)

        // Upload file k·∫øt qu·∫£ l√™n Supabase
        console.log('üì§ Upload file k·∫øt qu·∫£ l√™n Supabase...')
        const { error } = await supabase.storage
            .from(supabaseStorageBucket!)
            .upload(`${job.jobId}/outputs/${job.outputName}`, fs.createReadStream(outputFile), {
                contentType: 'video/mp4',
                upsert: true,
            })

        if (error) throw new Error('L·ªói upload file ho√†n ch·ªânh: ' + error.message)

        console.log('‚úÖ Upload th√†nh c√¥ng')

        // Xo√° file temp local
        for (const f of [inputVideo, inputAudio, cleanVideo, outputFile]) {
            try {
                if (fs.existsSync(f)) fs.unlinkSync(f)
            } catch {
                // Kh√¥ng l√†m g√¨ n·∫øu l·ªói
            }
        }

        // Xo√° file g·ªëc trong Supabase
        const videoPath = extractPath(job.videoUrl)
        const audioPath = extractPath(job.audioUrl)

        if (videoPath) {
            try {
                await supabase.storage.from(supabaseStorageBucket!).remove([videoPath])
            } catch {
                // Kh√¥ng l√†m g√¨ n·∫øu l·ªói
            }
        }

        if (audioPath) {
            try {
                await supabase.storage.from(supabaseStorageBucket!).remove([audioPath])
            } catch {
                // Kh√¥ng l√†m g√¨ n·∫øu l·ªói
            }
        }

        console.log(`‚úÖ Ho√†n th√†nh job ${job.jobId}`)
    } catch (err) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω job ${job.jobId}:`, err)
    }
}

// H√†m delay ƒë∆°n gi·∫£n
function sleep(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms))
}

// H√†m ch·∫°y worker l·∫•y job t·ª´ Redis queue v√† x·ª≠ l√Ω li√™n t·ª•c
async function runWorker() {
    console.log('‚è≥ Worker Onlook ƒëang ch·∫°y, ch·ªù job...')

    while (true) {
        try {
            const jobStr = await redis.rpop(QUEUE_KEY)
            if (!jobStr) {
                await sleep(1000)
                continue
            }
            const job: Job = JSON.parse(jobStr)
            await processJob(job)
        } catch (error) {
            console.error('‚ùå L·ªói worker khi l·∫•y ho·∫∑c x·ª≠ l√Ω job:', error)
            await sleep(1000)
        }
    }
}

// Kh·ªüi t·∫°o HTTP server ƒë∆°n gi·∫£n ƒë·ªÉ gi·ªØ app ch·∫°y
const port = process.env.PORT || 8080
const server = http.createServer((req, res) => {
    res.writeHead(200)
    res.end('Worker is alive')
})

server.listen(port, () => {
    console.log(`HTTP server listening on port ${port}`)
    runWorker()
})
