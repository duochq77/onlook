import 'dotenv/config'
import fs from 'fs'
import { execSync } from 'child_process'
import path from 'path'
import { createClient } from '@supabase/supabase-js'
import { Redis } from '@upstash/redis'
import { Readable } from 'stream'

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

const TMP = '/tmp'

// S·ª≠a h√†m download ƒë·ªÉ chuy·ªÉn ReadableStream web sang Node.js stream
async function download(url: string, dest: string) {
    const res = await fetch(url)
    if (!res.ok || !res.body) throw new Error(`‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c: ${url}`)

    const fileStream = fs.createWriteStream(dest)
    const nodeStream = Readable.from(res.body as any) // chuy·ªÉn sang Node.js stream

    await new Promise<void>((resolve, reject) => {
        nodeStream.pipe(fileStream)
        nodeStream.on('error', reject)
        fileStream.on('finish', resolve)
    })
}

async function processJob(job: {
    jobId: string
    videoUrl: string
    audioUrl: string
    outputName: string
}) {
    const inputVideo = path.join(TMP, 'input.mp4')
    const inputAudio = path.join(TMP, 'input.mp3')
    const cleanVideo = path.join(TMP, 'clean.mp4')
    const outputFile = path.join(TMP, job.outputName)

    console.log(`üü¢ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω job ${job.jobId}`)

    try {
        console.log('üì• ƒêang t·∫£i video + audio t·ª´ Supabase...')
        await download(job.videoUrl, inputVideo)
        await download(job.audioUrl, inputAudio)

        if (!fs.existsSync(inputVideo) || !fs.existsSync(inputAudio)) {
            throw new Error('‚ùå File t·∫£i v·ªÅ kh√¥ng t·ªìn t·∫°i!')
        }

        console.log('‚úÇÔ∏è ƒêang t√°ch audio kh·ªèi video...')
        execSync(`ffmpeg -i ${inputVideo} -an -c:v copy ${cleanVideo} -y`)

        console.log('üéß ƒêang gh√©p audio g·ªëc v√†o video s·∫°ch...')
        execSync(`ffmpeg -i ${cleanVideo} -i ${inputAudio} -c:v copy -c:a aac -shortest ${outputFile} -y`)

        console.log('üöÄ Upload file merged l√™n Supabase...')
        const uploadRes = await supabase.storage.from('stream-files').upload(
            `outputs/${job.outputName}`,
            fs.createReadStream(outputFile),
            {
                contentType: 'video/mp4',
                upsert: true,
            }
        )

        if (uploadRes.error) {
            throw new Error(`‚ùå L·ªói khi upload file merged: ${uploadRes.error.message}`)
        }

        // Xo√° file nguy√™n li·ªáu c≈©
        const extractPath = (url: string) => url.split('/object/public/stream-files/')[1]
        await supabase.storage.from('stream-files').remove([extractPath(job.videoUrl)])
        await supabase.storage.from('stream-files').remove([extractPath(job.audioUrl)])

        console.log(`‚úÖ Ho√†n t·∫•t job ${job.jobId}: outputs/${job.outputName}`)
    } catch (err) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω job ${job.jobId}:`, err)
    }
}

async function runWorker() {
    console.log('‚è≥ Worker Onlook ƒëang ch·∫°y...')

    while (true) {
        try {
            // L·∫•y job cu·ªëi (ƒë·∫©y v√†o ƒë·∫ßu), ƒë·ª£i t·ªëi ƒëa 30s
            const jobJson = await redis.brpop('onlook:process-video-queue', 30)
            if (!jobJson) {
                // Kh√¥ng c√≥ job, ti·∫øp t·ª•c v√≤ng l·∫∑p
                continue
            }

            // brpop tr·∫£ v·ªÅ [key, value]
            const jobPayload = jobJson[1]
            const job = JSON.parse(jobPayload)
            await processJob(job)
        } catch (err) {
            console.error('‚ùå L·ªói worker:', err)
            // C√≥ th·ªÉ th√™m delay ƒë·ªÉ tr√°nh v√≤ng l·∫∑p qu√° nhanh khi l·ªói
            await new Promise((r) => setTimeout(r, 5000))
        }
    }
}

runWorker()
