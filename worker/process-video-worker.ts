import { createClient } from '@supabase/supabase-js'
import Redis from 'ioredis'
import ffmpeg from 'fluent-ffmpeg'
import fs from 'fs'
import os from 'os'
import path from 'path'
import express, { Request, Response, Express } from 'express'
import fetch from 'node-fetch'

console.log('üöÄ process-video-worker.ts kh·ªüi ƒë·ªông...')

// Bi·∫øn m√¥i tr∆∞·ªùng
const {
    SUPABASE_URL,
    SUPABASE_SERVICE_ROLE_KEY,
    SUPABASE_STORAGE_BUCKET,
    REDIS_HOST,
    REDIS_PORT,
    REDIS_PASSWORD,
    PORT = 8080
} = process.env

if (
    !SUPABASE_URL ||
    !SUPABASE_SERVICE_ROLE_KEY ||
    !SUPABASE_STORAGE_BUCKET ||
    !REDIS_HOST ||
    !REDIS_PORT ||
    !REDIS_PASSWORD
) {
    throw new Error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc.')
}

// Kh·ªüi t·∫°o Supabase client
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

// Kh·ªüi t·∫°o Redis client v·ªõi c·∫•u h√¨nh retry, timeout, b·∫Øt l·ªói
const redis = new Redis({
    host: REDIS_HOST,
    port: parseInt(REDIS_PORT),
    password: REDIS_PASSWORD,
    tls: {}, // B·∫Øt bu·ªôc cho Upstash TCP
    connectTimeout: 10000,
    maxRetriesPerRequest: 5,
    retryStrategy(times) {
        const delay = Math.min(times * 1000, 30000) // tƒÉng d·∫ßn 1s, max 30s
        console.warn(`Redis retry #${times}, ch·ªù ${delay}ms`)
        return delay
    }
})

redis.on('error', (err) => {
    console.error('Redis error:', err)
})

redis.on('close', () => {
    console.warn('Redis connection closed, ƒëang c·ªë k·∫øt n·ªëi l·∫°i...')
})

// H√†m t·∫£i file v·ªÅ RAM (Buffer)
const downloadFileToBuffer = async (url: string): Promise<Buffer> => {
    console.log(`‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu t·∫£i file t·ª´ URL v·ªÅ RAM: ${url}`)
    const res = await fetch(url)
    if (!res.ok) throw new Error(`‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c file: ${url}, status: ${res.status}`)

    const arrayBuffer = await res.arrayBuffer()
    const buffer = Buffer.from(arrayBuffer)
    console.log(`‚úîÔ∏è ƒê√£ t·∫£i file v·ªÅ RAM: ${url}, k√≠ch th∆∞·ªõc: ${buffer.length} bytes`)
    return buffer
}

// H√†m ghi Buffer ra file t·∫°m
const saveBufferToFile = async (buffer: Buffer, filePath: string) => {
    await fs.promises.writeFile(filePath, buffer)
    console.log(`‚úîÔ∏è ƒê√£ ghi buffer ra file: ${filePath}`)
}

// H√†m l·∫•y th·ªùi l∆∞·ª£ng media
const getDuration = (filePath: string): Promise<number> => {
    return new Promise((resolve, reject) => {
        ffmpeg.ffprobe(filePath, (err, metadata) => {
            if (err) {
                console.error(`‚ùå L·ªói l·∫•y duration file: ${filePath}`, err)
                return reject(err)
            }
            const duration = metadata.format.duration || 0
            console.log(`‚è± Duration c·ªßa file ${filePath}: ${duration}s`)
            resolve(duration)
        })
    })
}

// H√†m l·∫∑p media ƒë·ªÉ ƒë·ªìng b·ªô th·ªùi l∆∞·ª£ng
const loopMedia = (input: string, output: string, duration: number) => {
    console.log(`‚ñ∂Ô∏è L·∫∑p media file ${input} cho ƒë·ªß th·ªùi l∆∞·ª£ng ${duration}s v√†o ${output}`)
    return new Promise<void>((resolve, reject) => {
        ffmpeg()
            .input(input)
            .inputOptions('-stream_loop', '-1')
            .outputOptions('-t', `${duration}`)
            .save(output)
            .on('end', () => {
                console.log(`‚úîÔ∏è L·∫∑p media xong: ${output}`)
                resolve()
            })
            .on('error', (err) => {
                console.error(`‚ùå L·ªói khi l·∫∑p media: ${err.message}`)
                reject(err)
            })
    })
}

// H√†m c·∫Øt media
const cutMedia = (input: string, output: string, duration: number) => {
    console.log(`‚ñ∂Ô∏è C·∫Øt media file ${input} c√≤n ${duration}s, l∆∞u v√†o ${output}`)
    return new Promise<void>((resolve, reject) => {
        ffmpeg()
            .input(input)
            .setDuration(duration)
            .save(output)
            .on('end', () => {
                console.log(`‚úîÔ∏è C·∫Øt media xong: ${output}`)
                resolve()
            })
            .on('error', (err) => {
                console.error(`‚ùå L·ªói khi c·∫Øt media: ${err.message}`)
                reject(err)
            })
    })
}

// X·ª≠ l√Ω job: t·∫£i file, t√°ch audio, ƒë·ªìng b·ªô, gh√©p, upload k·∫øt qu·∫£
const processJob = async (job: any) => {
    console.log(`üì¶ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω job ${job.jobId}`)

    const tmpDir = path.join(os.tmpdir(), `onlook-${job.jobId}`)
    try {
        // X√≥a th∆∞ m·ª•c t·∫°m n·∫øu c√≥, r·ªìi t·∫°o l·∫°i m·ªõi
        fs.rmSync(tmpDir, { recursive: true, force: true })
        fs.mkdirSync(tmpDir)
        console.log(`‚úîÔ∏è Th∆∞ m·ª•c t·∫°m ${tmpDir} ƒë√£ ƒë∆∞·ª£c t·∫°o m·ªõi`)
    } catch (err) {
        console.error(`‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c t·∫°m ${tmpDir}:`, err)
        throw err
    }

    const inputVideo = path.join(tmpDir, 'input.mp4')
    const inputAudio = path.join(tmpDir, 'input.mp3')
    const cleanVideo = path.join(tmpDir, 'clean.mp4')
    const finalVideo = path.join(tmpDir, 'final.mp4')
    const finalAudio = path.join(tmpDir, 'final.mp3')
    const mergedOutput = path.join(tmpDir, 'output.mp4')

    try {
        // T·∫£i file video + audio v·ªÅ RAM r·ªìi ghi ra file t·∫°m
        const videoBuffer = await downloadFileToBuffer(job.videoUrl)
        await saveBufferToFile(videoBuffer, inputVideo)

        const audioBuffer = await downloadFileToBuffer(job.audioUrl)
        await saveBufferToFile(audioBuffer, inputAudio)

        console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu t√°ch video s·∫°ch (no audio, copy video stream)...')
        await new Promise<void>((resolve, reject) => {
            ffmpeg()
                .input(inputVideo)
                .outputOptions('-c:v copy', '-an') // copy video, remove audio
                .save(cleanVideo)
                .on('end', () => {
                    console.log(`‚úîÔ∏è ƒê√£ t√°ch video s·∫°ch: ${cleanVideo}`)
                    resolve()
                })
                .on('error', (err) => {
                    console.error(`‚ùå L·ªói khi t√°ch video s·∫°ch: ${err.message}`)
                    reject(err)
                })
        })

        const videoDur = await getDuration(cleanVideo)
        const audioDur = await getDuration(inputAudio)
        console.log(`‚è± Th·ªùi l∆∞·ª£ng video: ${videoDur}s, audio: ${audioDur}s`)

        // ƒê·ªìng b·ªô th·ªùi l∆∞·ª£ng video v√† audio
        if (Math.abs(videoDur - audioDur) < 1) {
            console.log('‚ñ∂Ô∏è Th·ªùi l∆∞·ª£ng g·∫ßn b·∫±ng, sao ch√©p tr·ª±c ti·∫øp')
            fs.copyFileSync(cleanVideo, finalVideo)
            fs.copyFileSync(inputAudio, finalAudio)
        } else if (videoDur < audioDur) {
            await loopMedia(cleanVideo, finalVideo, audioDur)
            await cutMedia(finalVideo, finalVideo, audioDur)
            fs.copyFileSync(inputAudio, finalAudio)
        } else if (videoDur > audioDur && videoDur / audioDur < 1.2) {
            await cutMedia(cleanVideo, finalVideo, audioDur)
            fs.copyFileSync(inputAudio, finalAudio)
        } else {
            fs.copyFileSync(cleanVideo, finalVideo)
            await loopMedia(inputAudio, finalAudio, videoDur)
            await cutMedia(finalAudio, finalAudio, videoDur)
        }

        console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu gh√©p video v√† audio (copy video stream, m√£ ho√° l·∫°i audio AAC)...')
        await new Promise<void>((resolve, reject) => {
            ffmpeg()
                .input(finalVideo)
                .input(finalAudio)
                .outputOptions('-c:v copy', '-c:a aac', '-shortest')
                .save(mergedOutput)
                .on('end', () => {
                    console.log(`‚úîÔ∏è Gh√©p video + audio xong: ${mergedOutput}`)
                    resolve()
                })
                .on('error', (err) => {
                    console.error(`‚ùå L·ªói khi gh√©p media: ${err.message}`)
                    reject(err)
                })
        })

        const buffer = fs.readFileSync(mergedOutput)
        const outputPath = `outputs/${job.outputName}`
        console.log(`‚ñ∂Ô∏è Upload file k·∫øt qu·∫£ l√™n Supabase: ${outputPath}`)
        const { error: uploadErr } = await supabase.storage.from(SUPABASE_STORAGE_BUCKET).upload(outputPath, buffer, {
            upsert: true,
            contentType: 'video/mp4'
        })
        if (uploadErr) {
            throw new Error(`‚ùå Upload file l·ªói: ${uploadErr.message}`)
        }
        console.log('‚úîÔ∏è Upload th√†nh c√¥ng')

        console.log('‚ñ∂Ô∏è Xo√° file nguy√™n li·ªáu tr√™n Supabase')
        const { error: removeErr } = await supabase.storage.from(SUPABASE_STORAGE_BUCKET).remove([
            `input-videos/input-${job.jobId}.mp4`,
            `input-audios/input-${job.jobId}.mp3`
        ])
        if (removeErr) {
            console.warn(`‚ö†Ô∏è L·ªói khi x√≥a file nguy√™n li·ªáu: ${removeErr.message}`)
        } else {
            console.log('‚úîÔ∏è Xo√° file nguy√™n li·ªáu th√†nh c√¥ng')
        }
    } catch (err: any) {
        console.error(`‚ùå L·ªói job ${job.jobId}:`, err.message || err)
    } finally {
        try {
            fs.rmSync(tmpDir, { recursive: true, force: true })
            console.log(`üßΩ D·ªçn RAM job ${job.jobId} th√†nh c√¥ng`)
        } catch (err) {
            console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn RAM job ${job.jobId}:`, err)
        }
    }
}

// V√≤ng l·∫∑p worker r√∫t job li√™n t·ª•c t·ª´ Redis queue
const startWorker = async () => {
    console.log('üë∑ Worker n·ªÅn ƒëang ch·∫°y...')
    while (true) {
        try {
            const jobStr = await redis.lpop('onlook:job-queue')
            if (jobStr) {
                const job = JSON.parse(jobStr)
                await processJob(job)
            } else {
                console.log('‚è≥ Kh√¥ng c√≥ job trong h√†ng ƒë·ª£i...')
                await new Promise(resolve => setTimeout(resolve, 2000))
            }
        } catch (err) {
            console.error('‚ùå L·ªói v√≤ng l·∫∑p worker:', err)
        }
    }
}

// Express server cho health check + POST / tr√°nh l·ªói 404
const app: Express = express()
app.use(express.json())

app.post('/', (req: Request, res: Response) => {
    res.status(200).send('OK - Worker nh·∫≠n POST /')
})

app.get('/', (req: Request, res: Response) => {
    res.send('üü¢ Worker ho·∫°t ƒë·ªông')
})

app.listen(Number(PORT), () => {
    console.log(`üåê Listening on port ${PORT}`)
})

// Kh·ªüi ch·∫°y worker
startWorker()
