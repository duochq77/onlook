import 'dotenv/config'
import { Redis } from '@upstash/redis'
import path from 'path'
import fs from 'fs'

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

async function runCleanupWorker() {
    console.log('üßπ Cleanup Worker ƒë√£ kh·ªüi ƒë·ªông...')

    while (true) {
        const job = await redis.lpop<string>('ffmpeg-jobs:cleanup')
        if (!job) {
            await new Promise((r) => setTimeout(r, 5000)) // ki·ªÉm tra m·ªói 5 gi√¢y
            continue
        }

        try {
            const {
                outputName,
                endedAt,
                deleteType, // 'origin' | 'final'
                originFiles // m·∫£ng file g·ªëc c·∫ßn xo√° (n·∫øu c√≥)
            } = JSON.parse(job)

            if (deleteType === 'origin') {
                // Xo√° file g·ªëc + file t·∫°m ngay l·∫≠p t·ª©c
                if (Array.isArray(originFiles)) {
                    for (const f of originFiles) {
                        const filePath = path.join('/tmp', f)
                        if (fs.existsSync(filePath)) {
                            fs.unlinkSync(filePath)
                            console.log(`‚úÖ ƒê√£ xo√° file g·ªëc/t·∫°m: ${filePath}`)
                        } else {
                            console.log(`‚ö†Ô∏è File g·ªëc/t·∫°m kh√¥ng t·ªìn t·∫°i: ${filePath}`)
                        }
                    }
                }
                // Xo√° lu√¥n file output n·∫øu c√≥
                if (outputName) {
                    const outputPath = path.join('/tmp', outputName)
                    if (fs.existsSync(outputPath)) {
                        fs.unlinkSync(outputPath)
                        console.log(`‚úÖ ƒê√£ xo√° file output: ${outputPath}`)
                    }
                }
            }
            else if (deleteType === 'final') {
                // Xo√° file media ƒë√£ ho√†n ch·ªânh sau 5 ph√∫t k·ªÉ t·ª´ endedAt
                if (!endedAt) {
                    console.warn('‚ö†Ô∏è Job xo√° final thi·∫øu endedAt, b·ªè qua')
                    continue
                }

                const now = Date.now()
                const delayMs = now - endedAt
                const delayThreshold = 5 * 60 * 1000 // 5 ph√∫t

                if (delayMs < delayThreshold) {
                    const waitMs = delayThreshold - delayMs
                    console.log(`üïí Ch∆∞a ƒë·ªß 5 ph√∫t, ch·ªù th√™m ${Math.ceil(waitMs / 1000)} gi√¢y...`)
                    // ƒê·∫©y l·∫°i job ƒë·ªÉ x·ª≠ l√Ω sau
                    await redis.rpush('ffmpeg-jobs:cleanup', job)
                    await new Promise((r) => setTimeout(r, 3000)) // ngh·ªâ nh·∫π
                    continue
                }

                const filePath = path.join('/tmp', outputName)
                if (fs.existsSync(filePath)) {
                    fs.unlinkSync(filePath)
                    console.log(`‚úÖ ƒê√£ xo√° file media final: ${filePath}`)
                } else {
                    console.log(`‚ö†Ô∏è File media final kh√¥ng t·ªìn t·∫°i: ${filePath}`)
                }
            }
            else {
                console.warn(`‚ö†Ô∏è Lo·∫°i deleteType kh√¥ng x√°c ƒë·ªãnh: ${deleteType}`)
            }
        } catch (err) {
            console.error('‚ùå L·ªói khi x·ª≠ l√Ω cleanup job:', err)
        }
    }
}

runCleanupWorker()
