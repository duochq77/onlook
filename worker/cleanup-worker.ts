import 'dotenv/config'
import { Redis } from '@upstash/redis'
import { createClient } from '@supabase/supabase-js'

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL!,
    token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

async function runCleanupWorker() {
    console.log('üßπ Cleanup Worker b·∫Øt ƒë·∫ßu...')

    while (true) {
        const job = await redis.lpop<string>('ffmpeg-jobs:cleanup')
        if (!job) {
            await new Promise((r) => setTimeout(r, 2000))
            continue
        }

        const { inputVideo, inputAudio } = JSON.parse(job)
        console.log('üì¶ Nh·∫≠n job CLEANUP:', { inputVideo, inputAudio })

        // 1. Xo√° file video g·ªëc tr√™n Supabase
        if (inputVideo) {
            const { error } = await supabase.storage.from('stream-files').remove([inputVideo])
            if (error) console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° inputVideo:', inputVideo, error)
            else console.log('üóë ƒê√£ xo√° inputVideo:', inputVideo)
        }

        // 2. Xo√° file audio g·ªëc tr√™n Supabase
        if (inputAudio) {
            const { error } = await supabase.storage.from('stream-files').remove([inputAudio])
            if (error) console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° inputAudio:', inputAudio, error)
            else console.log('üóë ƒê√£ xo√° inputAudio:', inputAudio)
        }

        console.log('‚úÖ Cleanup ho√†n t·∫•t (2 file g·ªëc)')
    }
}

runCleanupWorker().catch((err) => console.error('‚ùå Worker g·∫∑p l·ªói:', err))
